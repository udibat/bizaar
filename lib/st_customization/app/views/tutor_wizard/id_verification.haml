// main block for all wizard steps
.page-content-inner.wizard.wizard-instructor
  .head-section
    %h1.head-section-title ID verification
  = render partial: 'wizard_head'
  .wizard-section
    %h2.small-title.flex-block 
      .title-image-holder
        = image_tag "custom_images/id-card.png"
      Verify your ID
    %span.errors
    .wizard-content
      .wizard-inner
        .need-upload
          .text-content
            %p Most classes would involve face-to-face meetings, so we strive to ensure the safety of our community members.
            %p 
              By verifying your ID, you get this
              %span.verify-sign
                = image_tag "custom_images/checked.png", class: 'small-icon'
                %span.uppercase.green Id verified
              badge and you will help your students feel safer about signing up for classes. 
              %b Your ID will not be seen by anyone but us. 
          .text-content
            %p 
              We have the utmost respect for our users personal information and 
              %b will not share your information 
              with with any third parties or entities outside of Bizaar management.
            .link-holder.flex-start.links
              = link_to 'Have more questions? Learn more here.', '#', class: 'green underline link'
              = link_to ' Or take a look at our Terms of Agreement', '#', class: 'green underline link'
          = form_for @custom_profile, url: profile_upload_id_verifications_path(@custom_profile), remote: true, html: { multipart: true, id: "fileupload" } do |f|
            // = f.text_area :description, cols: 20, rows: 10, maxlength: CustomProfile::MAX_DESCRIPTION_LENGTH
            .row
              .col-5
                = link_to '#', class: 'btn btn--black upload-link trigger_upload' do
                  .small-icon
                    %svg.svg-inline--fa.fa-file-upload.fa-w-12{"aria-hidden" => "true", "data-icon" => "file-upload", "data-prefix" => "fas", :focusable => "false", :role => "img", :viewbox => "0 0 384 512", :xmlns => "http://www.w3.org/2000/svg"}
                      %path{:d => "M224 136V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V160H248c-13.2 0-24-10.8-24-24zm65.18 216.01H224v80c0 8.84-7.16 16-16 16h-32c-8.84 0-16-7.16-16-16v-80H94.82c-14.28 0-21.41-17.29-11.27-27.36l96.42-95.7c6.65-6.61 17.39-6.61 24.04 0l96.42 95.7c10.15 10.07 3.03 27.36-11.25 27.36zM377 105L279.1 7c-4.5-4.5-10.6-7-17-7H256v128h128v-6.1c0-6.3-2.5-12.4-7-16.9z", :fill => "currentColor"}
                  Choose File
            - idx = 0
            = f.fields_for :id_verifications, @custom_profile.id_verifications.build do |photos_fields|
              = photos_fields.file_field :image, multiple: false, name: "custom_profile[id_verifications_attributes][#{idx}][image]" if photos_fields.object.new_record?
            .existing_cover_photos
              = f.fields_for :id_verifications, @custom_profile.id_verifications do |photos_fields|
                - unless photos_fields.object.new_record?
                  .fields_cont.existing_photo_record
                    .thumb-block
                      = image_tag photos_fields.object.image.url(:thumb)
                    %div.image_descr
                      %div= photos_fields.object.image.original_filename
                      = photos_fields.hidden_field :id
                      = photos_fields.label :_destroy, 'Remove this photo', class: 'remove-photo'
                      = photos_fields.check_box :_destroy, {class: 'delete_record_chbx'}
          .row.step-buttons
            .col-6
              = link_to "Back", @prev_step_path, class: 'confirm_step_btn btn btn--violet-transp', remote: true
            .col-6
              = link_to "Next", @confirm_step_path, class: 'confirm_step_btn btn btn--violet', remote: true
          // = link_to "Skip current step", tutor_wizard_skip_step_path(@tutor_status.signup_status), class: ''

= render partial: 'confirm_step_btn_js'

:javascript

  function build_photo_spots(items) {

    $('.existing_cover_photos').html('');
    //$('.table-striped .files').html('')

    items.forEach(function(item, i){
      idx = i + 1
      var img_cont = $('<div>', {class: 'image_spot'})

      var id_field = $('<input type="hidden">')
      $(id_field).attr('name', 'custom_profile[id_verifications_attributes][' + idx + '][id]')
      $(id_field).attr('id', 'custom_profile_id_verifications_attributes_' + idx + '_id')
      $(id_field).val(item.id)

      var destroy_field = $('<input type="checkbox">')
      $(destroy_field).attr('name', 'custom_profile[id_verifications_attributes][' + idx + '][_destroy]')
      $(destroy_field).attr('id', 'custom_profile_id_verifications_attributes_' + idx + '__destroy')
      //$(destroy_field).addClass('delete_record_chbx');
      $(destroy_field).val(1)
      $(destroy_field).on('click', function(){
        $('#fileupload').trigger('submit.rails');
      });


      var descr_cont = $('<div>', {class: 'image_descr'});
      var img_holder = $('<div>', {class: 'thumb-block'})
      var idField = id_field;
      var destroyBtn = $('<label class="remove-photo" for="custom_profile_id_verifications_attributes_' + idx + '__destroy">').html('Remove this photo')
      var destroyField = destroy_field;
      var imageTag = $('<img>',{src: item.url});
      var imageName = $('<div>').html(item.name);

      descr_cont.append(imageName, idField, destroyBtn, destroyField);
      img_holder.append(imageTag);
      img_cont.append(img_holder, descr_cont);

      $('.existing_cover_photos').append(img_cont);

    })
  }

  onDocumentReady(function(){
    $('.trigger_upload').on('click', function(event) {
      event.preventDefault();
      $('input[type="file"]').trigger('click');
    });

    $('#fileupload').on('click', '.delete_record_chbx', function(){
      $('#fileupload').trigger('submit.rails');
    });

    $("#fileupload").on("ajax:success", function(event, data){
        build_photo_spots(data.images);
      }
    ).on("ajax:error", function(event, data){
        // console.log(data.responseJSON.error);
        //console.log(data);
        $(".errors").html('Error:')
        var err_obj = data.responseJSON.error
        Object.keys(err_obj).forEach(function (key) { 
          var value = err_obj[key]
          $(".errors").append(key + ': ' + value[0]);
        })
      }
    )
    
    $('#fileupload').fileupload({
      done: function (e, data) {
          if (data.result.error === undefined) {
            build_photo_spots(data.result.images);
          } else {
            alert(data.result.error);
          }
        }
    });
  });

